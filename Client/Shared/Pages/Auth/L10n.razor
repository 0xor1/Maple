@using Dnsk.Client.Lib
@using System.Text.RegularExpressions
@using Common
@using Dnsk.I18n
@using AuthValidator = Dnsk.Client.Lib.AuthValidator
<div class="root col">
    <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
        Localization
    </RadzenText>
    <RadzenTemplateForm
        TItem="Model"
        Data="_model"
        Submit="Do"
        class="flx col ai-stretch g-1">
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Lang" Text="Lang"/>
            <RadzenDropDown AllowClear="false" TValue="Lang" 
                            Data=@(Strings.SupportedLangs) 
                            SelectedItem="@Strings.SupportedLangs.First(x => x.Code == _model.Lang)"
                            Change="LangSelected" />
        </div>
        <RadzenButton ButtonType="ButtonType.Submit" BusyText="Updating" IsBusy="_doing" Text="Update" Disabled="!CanDo"/>
    </RadzenTemplateForm>
</div>

@inject IAuthService Auth;
@code{

    record Model
    {
        public string Lang { get; set; } = Strings.DefaultLang;
        public string DateFmt { get; set; } = Strings.DefaultDateFmt;
        public string TimeFmt { get; set; } = Strings.DefaultTimeFmt;
    }

    private bool CanDo => _model != _initialValues && !_doing;

    private Session _session = new (); 
    private Model _model = new (); 
    private Model _initialValues = new (); 
    private bool _doing = false;

    protected override async Task OnInitializedAsync()
    {
        _session = await Auth.GetSession();
        _model.Lang = _session.Lang;
        _model.DateFmt = _session.DateFmt;
        _model.TimeFmt = _session.TimeFmt;
        _initialValues.Lang = _session.Lang;
        _initialValues.DateFmt = _session.DateFmt;
        _initialValues.TimeFmt = _session.TimeFmt;
    }

    private async Task Do()
    {
        _doing = true;
        try
        {
            await Auth.SetL10n(_model.Lang, _model.DateFmt, _model.TimeFmt);
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
    }

    private void LangSelected(object val)
    {
        _model.Lang = ((Lang)val).Code;
    }
}