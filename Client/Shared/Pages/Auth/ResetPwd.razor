@using Dnsk.Client.Lib
@using System.Text.RegularExpressions
@using Common
@using Dnsk.Proto
@using AuthValidator = Dnsk.Client.Lib.AuthValidator
<div class="root jc-c ai-c">
    <RadzenCard class="p-3 w-25">
            <RadzenText TextStyle="TextStyle.H4" TagName="TagName.H2" class="m-t-0">
                Reset Password
            </RadzenText>
            @if (_success)
            {
                <div class="flx col ai-stretch">
                    <RadzenText TextStyle="TextStyle.Body1" TagName="TagName.P" class="m-b-1 f-b rz-color-success-light">
                        You can now sign in with your new password.
                    </RadzenText>
                    <RadzenButton ButtonType="ButtonType.Button"Text="Sign In" Click="SignIn"/>
                </div>
            }
            else
            {
                <RadzenTemplateForm
                    TItem="Model"
                    Data="_model"
                    Submit="Do"
                    class="flx col ai-stretch g-1">
                    <div class="flx col ai-stretch">
                        <RadzenLabel class="m-b-0q" Component="Password" Text="Password"/>
                        <RadzenPassword Name="Password" @bind-Value="@_model.NewPwd" Disabled="!CanDo"/>
                        <RadzenCustomValidator Validator="PwdValidator" Component="Password" Popup="true" Text="Invalid password"></RadzenCustomValidator>
                    </div>
                    <div class="flx col ai-stretch">
                        <RadzenLabel class="m-b-0q" Component="ConfirmPassword" Text="Confirm Password"/>
                        <RadzenPassword Name="ConfirmPassword" @bind-Value="@_model.ConfirmNewPwd" Disabled="!CanDo"/>
                        <RadzenCustomValidator Validator="ConfirmPasswordValidator" Component="ConfirmPassword" Popup="true" Text="Passwords don't match"></RadzenCustomValidator>
                    </div>
                    <RadzenButton ButtonType="ButtonType.Submit" BusyText="Resetting" IsBusy="_doing" Text="Reset Password" Disabled="!CanDo"/>
                </RadzenTemplateForm>
            }
        </RadzenCard>
</div>

@inject Api.ApiClient Api;
@inject NavigationManager Nav;
@code{

    [Parameter]
    public string Email { get; set; } = "";

    [Parameter]
    public string Code { get; set; } = "";

    class Model
    {
        public string NewPwd { get; set; } = "";
        public string ConfirmNewPwd { get; set; } = "";
    }

    private Model _model = new();
    private bool CanDo => !_doing && !_success;
    private bool _doing = false;
    private bool _success = false;

    private async Task Do()
    {
        _doing = true;
        try
        {
            await Api.Auth_ResetPwdAsync(new Auth_ResetPwdReq()
            {
                Email = Email,
                Code = Code,
                NewPwd = _model.NewPwd
            });
            _success = true;
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
    }

    private void SignIn()
    {
        Nav.NavigateTo("sign_in");
    }
    
    private ValidationResult PwdValidator(IRadzenFormComponent component)
        => AuthValidator.PwdValidator(component);

    private ValidationResult ConfirmPasswordValidator(IRadzenFormComponent component)
        => new ()
        {
            Valid = (component.GetValue() as string ?? "") == _model.NewPwd
        };
}