<div class="root col">
    @if (_config.DemoMode)
    {
        <a class="txt-dec-none" href="@_config.RepoUrl" target="_blank">
        <div title="@L.S(CS.DemoTitle)" class="flx jc-c rz-background-color-danger-light rz-color-black f-b ptr h-1h">
            <span class="m-r-0h">@L.S(CS.Demo).ToUpper()</span>
            @if (!_config.RepoUrl.IsNullOrEmpty())
            {
                <img src="_content/0xor1.Common.Client/github-mark.png"/>
            }
        </div>
        </a>
    }
    <RadzenLayout class="rz-shadow-3 grow-1">
        <RadzenHeader class="flx jc-sb">
            <RadzenSidebarToggle class="flx jc-c ai-c sq-4t" Click="@(() => _leftExpanded = !_leftExpanded)"/>
            <RadzenProfileMenu class="m-t-0t">
                <Template>
                    <RadzenIcon Icon="account_circle" IconStyle="@(_session.IsAuthed ? IconStyle.Success : IconStyle.Danger)"></RadzenIcon>
                </Template>
                <ChildContent>
                    @if (_session.IsAuthed)
                    {
                        <RadzenProfileMenuItem Text="@L.S(CS.SignOut)" Path="sign_out" Icon="account_circle"></RadzenProfileMenuItem>
                    }
                    else
                    {
                        <RadzenProfileMenuItem Text="@L.S(CS.SignIn)" Path="sign_in" Icon="account_circle"></RadzenProfileMenuItem>
                    }
                    <RadzenProfileMenuItem Text="@L.S(CS.L10n)" Path="l10n" Icon="translate"></RadzenProfileMenuItem>
                    @if (_session.IsAuthed)
                    {
                        // manually build a custom nav menu item to have full
                        // control over the content
                        <li class="rz-navigation-item" onclick="@ToggleLiveUI" title="@L.S(CS.ToggleLiveUpdates)">
                            <div class="rz-navigation-item-wrapper">
                                <div class="rz-navigation-item-link">
                                    @if (_session.FcmEnabled)
                                    {
                                        <i class="rzi rz-navigation-item-icon rz-color-success">monitor_heart</i>
                                        <span class="rz-navigation-item-text">
                                            @L.S(@CS.Live) <strong class="rz-color-success">@L.S(@CS.On)</strong>
                                        </span>
                                    }
                                    else
                                    {
                                        <i class="rzi rz-navigation-item-icon rz-color-danger">monitor_heart</i>
                                        <span class="rz-navigation-item-text">
                                            @L.S(@CS.Live) <strong class="rz-color-danger">@L.S(CS.Off)</strong>
                                        </span>
                                    }
                                </div>
                            </div>
                        </li>
                    }
                </ChildContent>
            </RadzenProfileMenu>
        </RadzenHeader>
        <RadzenSidebar @bind-Expanded="@_leftExpanded">
            <RadzenPanelMenu>
                <RadzenPanelMenuItem Text="@L.S(S.Home)" Icon="home" Path="/" Click="CollapseIfNarrow"/>
                @if (_session.IsAuthed)
                {
                    <RadzenPanelMenuItem Text="@L.S(S.Counter)" Icon="star" Path="@($"/{_session.Id}/counter")" Click="CollapseIfNarrow"/>
                }
            </RadzenPanelMenu>
        </RadzenSidebar>
        <RadzenBody class="root rz-background-color-base-100">
            <CascadingValue Value="@_session">
                @if (_ready)
                {
                    @Body
                }
                else
                {
                    <p>Loading Session</p>
                }
            </CascadingValue>
        </RadzenBody>
        <RadzenComponents/>
    </RadzenLayout>
</div>
@using Common.Shared
@using Common.Shared.Auth
@using IApi = Dnsk.Api.IApi
@using S = Dnsk.I18n.S
@using CS = Common.Shared.I18n.S
@inherits LayoutComponentBase
@inject IAuthService Auth;
@inject IApi Api;
@inject L L;
@inject IJSRuntime Js;
@code{

    private bool _leftExpanded;
    private ISession _session = Session.CommonDefault();
    private Config _config = new (false, null);
    private bool _ready;
    protected override async Task OnInitializedAsync()
    {
        Auth.OnSessionChanged(OnSessionChanged);
        OnSessionChanged(await Auth.GetSession());
        _config = await Api.App.GetConfig();
        _ready = true;
    }

    private void OnSessionChanged(ISession s)
    {
        _session = s;
        StateHasChanged();
    }

    private async void ToggleLiveUI()
    {
        await Auth.FcmEnabled(!_session.FcmEnabled);
    }

    private async Task CollapseIfNarrow(MouseEventArgs args)
    {
        var width = await Js.InvokeAsync<decimal>("getWidth");
        if(width < 50)
            _leftExpanded = false;
    }

}