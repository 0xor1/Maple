@using Common.Shared
@using Common.Shared.Auth
@using Maple.Api.Org
@using Maple.Api.OrgMember
@using Maple.Client.Lib
@using Maple.Util
@using AuthValidator = Common.Client.AuthValidator
@using CS = Common.Shared.I18n.S
@using Data = Maple.Api.OrgMember.Data
@using IApi = Maple.Api.IApi
@using S = Maple.I18n.S

<RadzenTemplateForm
    TItem="Model"
    Data="_model"
    Submit="Do"
    class="root col p-0h g-1 jc-s ai-s">
    <RadzenText class="m-0" TextStyle="TextStyle.H2">@(Ctx.OrgMember == null? L.S(S.OrgMemberNewOrgMember): L.S(S.OrgMemberUpdateOrgMember))</RadzenText>
    <div class="flx col ai-stretch">
        <RadzenLabel class="m-b-0q" Component="OrgName" Text="@L.S(S.Name)"/>
        <RadzenTextBox Name="Name" @bind-Value="@_model.Name"/>
        <RadzenRequiredValidator Component="Name" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
    </div>
    @if (Ctx.OrgMember == null)
    {
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Email" Text="@L.S(CS.Email)"/>
            <RadzenTextBox Name="Email" @bind-Value="@_model.Email"/>
            <CommonCustomValidator Component="Email" Popup="true" Validator="AuthValidator.EmailValidator"/>
        </div>
    }
    else
    {
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Role" Text="@L.S(S.OrgMemberRole)"/>
            <RadzenDropDown Name="Role" @bind-Value="@_model.Role" TValue="OrgMemberRole" ValueProperty="Role" TextProperty="Display" Data="OrgMembers.Roles(L, Ctx)"/>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Country" Text="@L.S(S.OrgYourCountry)"/>
            <RadzenDropDown TValue="Key" Data="Countries" ValueProperty="Key" TextProperty="Display" Name="Country" @bind-Value="@_model.Country" AllowClear="false" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"/>
            <RadzenRequiredValidator Component="Country" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <RadzenText class="m-0" TextStyle="TextStyle.H5">@L.S(S.Profile)</RadzenText>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="Image" Text="@L.S(S.Image)"/>
            <RadzenText class="m-0" TextStyle="TextStyle.Subtitle2" Text="@L.S(S.ImageFileMaxSize)"/>
            <div class="rz-fileupload m-b-0q">
                <div class="rz-fileupload-buttonbar">
                    <span class="rz-fileupload-choose rz-button">
                        <InputFile OnChange="OnFileChanged" accept="image/png, image/jpeg"/>
                        <span class="rz-button-text">@L.S(S.Choose)</span>
                    </span>
                </div>
            </div>
            <RadzenImage Path="@ImageUrl" class="w-5 h-5 rz-gravatar" Style="object-fit: cover"/>
            <RadzenRequiredValidator Component="Country" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch w-100p">
            <RadzenLabel class="m-b-0q" Component="Title" Text="@L.S(S.Title)"/>
            <RadzenTextArea Rows="2" class="w-100p mw-100p" Name="Title" @bind-Value="@_model.ProfileTitle"/>
            <RadzenRequiredValidator Component="Title" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch w-100p">
            <RadzenLabel class="m-b-0q" Component="Body" Text="@L.S(S.Body)"/>
            <RadzenTextArea Rows="4" class="w-100p mw-100p" Name="Body" @bind-Value="@_model.ProfileBody"/>
            <RadzenRequiredValidator Component="Body" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch w-100p">
            <RadzenLabel class="m-b-0q" Component="Skills" Text="@L.S(S.Skills)"/>
            <RadzenText class="m-0" TextStyle="TextStyle.Subtitle2" Text="@L.S(S.CsvSkills)"/>
            <RadzenTextArea Rows="1" class="w-100p mw-100p" Name="Skills" @bind-Value="@_model.ProfileCsvSkills"/>
            <RadzenRequiredValidator Component="Skills" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="GithubUrl" Text="@L.S(S.GithubUrl)"/>
            <RadzenTextBox Name="GithubUrl" @bind-Value="@_model.ProfileGithubUrl"/>
            <RadzenRequiredValidator Component="GithubUrl" Popup="true" Text="@L.S(S.Required)"></RadzenRequiredValidator>
        </div>
        <div class="flx col ai-stretch">
            <RadzenLabel class="m-b-0q" Component="LinkedInUrl" Text="@L.S(S.LinkedInUrl)"/>
            <RadzenTextBox Name="LinkedInUrl" @bind-Value="@_model.ProfileLinkedInUrl"/>
        </div>
        <RadzenText class="m-0" TextStyle="TextStyle.H5">@L.S(S.Skills)</RadzenText>
        <div class="flx col">
            <RadzenDataGrid
                Count="Count"
                Data="Skills"
                TItem="KeyVal"
                IsLoading="_isLoading"
                EmptyText="@L.S(S.OrgNoSkills)"
                AllowColumnPicking="false"
                AllowSorting="false"
                AllowFiltering="false"
                KeyProperty="Key"
                LoadData="LoadData"
                Style="width: 25em;">
                <Columns>
                    <RadzenDataGridColumn Width="10em" TItem="KeyVal" Property="Key" Title="@L.S(S.Skill)">
                        <Template Context="i">
                            @i.Key
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn Width="10em" TItem="KeyVal" Property="Val" Title="@L.S(S.ProficiencyLevels)">
                        <Template Context="i">
                            <RadzenDropDown Style="width: 100%" Name="ExpLevel" @bind-Value="@i.Val" TValue="ExpLevel?" ValueProperty="ExpLevel" TextProperty="Display" Data="OrgMembers.ExpLevels(L)"/>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>
        </div>
    }
    <div class="flx g-0h jc-stretch">
        <RadzenButton ButtonType="ButtonType.Submit" IsBusy="_doing" Text="@(Ctx.OrgMember != null? L.S(CS.Update): L.S(S.Invite))"/>
    </div>
</RadzenTemplateForm>

@inject L L;
@inject UiCtx Ctx;
@inject IApi Api;
@inject NavigationManager Nav;
@inject NotificationService Notify;
@code {

    [CascadingParameter]
    public ISession Session { get; set; } = default!;
    
    [Parameter]
    public string OrgId { get; set; }

    [Parameter]
    public string? UpdateMemberId { get; set; }

    private string? ImageUrl { get; set; }

    private bool _isLoading = false;
    private int Count => Skills.Count;
    private List<KeyVal> Skills { get; set; } = new();

    public class KeyVal
    {
        public string Key { get; set; }
        public ExpLevel? Val { get; set; }
    }
    
    public class Model
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public OrgMemberRole Role { get; set; } = OrgMemberRole.Member;
        public Key Country { get; set; } = Util.Country.Afghanistan;
        public string ProfileTitle { get; set; } = string.Empty;
        public string ProfileBody { get; set; } = string.Empty;
        public string ProfileCsvSkills { get; set; } = string.Empty;
        public bool ProfileHasImage { get; set; } = false;
        public string ProfileImageType { get; set; } = string.Empty;
        public ulong ProfileImageSize { get; set; } = 0;
        public string ProfileGithubUrl { get; set; } = string.Empty;
        public string? ProfileLinkedInUrl { get; set; } = null;
        
    }
    
    private List<KeyDisplay> Countries => Country.Enum.Select(c => new KeyDisplay(c, L.S(c.Value))).ToList();

    Model _model = new();
    private bool _doing;

    protected override Task OnInitializedAsync()
    {
        
        if (Ctx.OrgMember != null)
        {
            _model.Id = Ctx.OrgMember.Id;
            _model.Name = Ctx.OrgMember.Name;
            _model.Role = Ctx.OrgMember.Role;
            _model.Country = Ctx.OrgMember.Country;
            _model.ProfileTitle = Ctx.OrgMember.Data.Profile.Title;
            _model.ProfileBody = Ctx.OrgMember.Data.Profile.Body;
            _model.ProfileCsvSkills = Ctx.OrgMember.Data.Profile.CsvSkills;
            _model.ProfileHasImage = Ctx.OrgMember.Data.Profile.HasImage;
            _model.ProfileImageType = Ctx.OrgMember.Data.Profile.ImageType;
            _model.ProfileImageSize = Ctx.OrgMember.Data.Profile.ImageSize;
            _model.ProfileGithubUrl = Ctx.OrgMember.Data.Profile.GithubUrl;
            _model.ProfileLinkedInUrl = Ctx.OrgMember.Data.Profile.LinkedInUrl;
            ImageUrl = _model.ProfileHasImage ? Api.OrgMember.DownloadImageUrl(new(OrgId, _model.Id, false)) : "/wolf.png";
        }
        Skills = Ctx.Org.NotNull().Data.Skills.Select(x => new KeyVal{ Key = x, Val = Ctx.OrgMember?.Data.SkillMatrix.Try(x).Val}).ToList();

        return Task.CompletedTask;
    }
    
    private async Task Do()
    {
        _doing = true;
        try
        {
            if (Ctx.OrgMember == null)
            { 
                await Api.OrgMember.Invite(new(OrgId, _model.Email, _model.Name, _model.Role, _model.Country));
            }
            else
            {
                var mem = await Api.OrgMember.Update(new(OrgId, Ctx.OrgMember.Id, _model.Name, _model.Role, _model.Country, new Data(Skills.Where(x => x.Val != null).ToDictionary(x => x.Key, x => x.Val.NotNull()), new Profile(_model.ProfileTitle, _model.ProfileBody, _model.ProfileCsvSkills, _model.ProfileHasImage, _model.ProfileImageType, _model.ProfileImageSize, _model.ProfileGithubUrl, _model.ProfileLinkedInUrl))));
                var i = Ctx.OrgMembers.FindIndex(x => x.Id == Ctx.OrgMemberId);
                Ctx.OrgMembers[i] = mem;
            }

            Nav.NavigateTo($"/org/{Ctx.Org.NotNull().Id}/members");
        }
        catch
        {
            // use empty catch to avoid having to
            // call StatHasChanged on errors
        }
        _doing = false;
    }

    private async Task OnFileChanged(InputFileChangeEventArgs arg)
    {
        if ((ulong?)arg.File?.Size > OrgMemberRpcs.UploadImage.MaxSize)
        {
            Notify.Notify(NotificationSeverity.Error, L.S(S.ImageFileMaxSize));
        }
        if (arg.File != null)
        {
            var mem = await Api.OrgMember.UploadImage(new (OrgId, _model.Id)
            {
                Stream = new RpcStream(arg.File.OpenReadStream((long)OrgMemberRpcs.UploadImage.MaxSize), arg.File.Name, arg.File.ContentType, false, (ulong)arg.File.Size)
            });
            var i = Ctx.OrgMembers.FindIndex(x => x.Id == Ctx.OrgMemberId);
            Ctx.OrgMembers[i] = mem;
            _model.ProfileHasImage = mem.Data.Profile.HasImage;
            _model.ProfileImageSize = mem.Data.Profile.ImageSize;
            _model.ProfileImageType = mem.Data.Profile.ImageType;
            ImageUrl = $"{Api.OrgMember.DownloadImageUrl(new(OrgId, _model.Id, false))}&t={DateTimeExt.UtcNowMilli():yyyyMMddhhmmss}";
            StateHasChanged();
        }
    }

    private async Task LoadData()
    {
        _isLoading = true;
        _isLoading = false;
        await Task.CompletedTask;
    }

}