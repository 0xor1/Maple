@using Common.Shared
@using Common.Shared.Auth
@using Maple.Api.OrgMember
@using Maple.Client.Lib
@using IApi = Maple.Api.IApi
@using S = Maple.I18n.S

<div class="root col p-0h g-0h jc-s ai-s">
    <RadzenText class="m-t-0" TextStyle="TextStyle.H2">@L.S(S.OrgMembers)</RadzenText>
    <RadzenButton class="m-b-1" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="@L.S(S.Invite)" Click="@OpenNewDialog"/>
    <RadzenDataGrid
        @ref="_grid"
        Count="Count"
        Data="Items"
        TItem="OrgMember"
        IsLoading="_isLoading"
        EmptyText="@L.S(S.OrgNoMembers)"
        FilterPopupRenderMode="PopupRenderMode.OnDemand" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        AllowSorting="true" 
        AllowFiltering="true"
        AllowPaging="true"
        LoadData="LoadData"
        KeyProperty="Id" Style="width: 50rem">
        <Columns>
            <RadzenDataGridColumn Sortable="true" Width="18em" TItem="OrgMember" Property="@nameof(OrgMember.Name)" Title="@L.S(S.Name)" FilterValue="@NameStartsWith">
                <Template Context="m">
                    <div class="flx child-no-shrink jc-s ai-c g-0h w-100 mw-100 p-rel">
                        <span class="shrink-1 ellip">@m.Name</span>
                        @if (Ctx.HasOrgAdminPerm && m.Role >= Ctx.OrgMember?.Role)
                        {
                            <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                <RadzenButton @onclick:stopPropagation="true" Icon="edit" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall" Click="_ => Update(m)"/>
                            </div>
                        }
                    </div>
                </Template>
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@NameStartsWith" Style="width:100%"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Sortable="true" TextAlign="TextAlign.Center" Width="10em" TItem="OrgMember" Property="@nameof(OrgMember.Role)" Title="@L.S(S.OrgMemberRole)" FilterValue="@Role">
                <Template Context="m">
                    @RoleString(m.Role, L)
                </Template>
                <FilterTemplate>
                    <RadzenDropDown Style="width: 100%" Name="Role" @bind-Value="@Role" TValue="OrgMemberRole?" ValueProperty="Role" TextProperty="Display" AllowClear="true" Data="Roles(L, null)"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@inject L L;
@inject IApi Api;
@inject NavigationManager Nav;
@inject DialogService DialogService;
@inject UiCtx Ctx;
@code{

    [CascadingParameter]
    public ISession Session { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string OrgId { get; set; } = "";

    private bool? IsActive { get; set; } = true;
    private string? NameStartsWith { get; set; }
    private OrgMemberRole? Role { get; set; }
    private int Count => Items.Count; 
    private List<OrgMember> Items { get; set; } = new ();
    private bool _isLoading = false;
    private RadzenDataGrid<OrgMember> _grid;
    
    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        try
        {
            var res = await Api.OrgMember.Get(new(OrgId));
            Items = Ctx.OrgMembers;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OpenNewDialog()
        => await DialogService.OpenAsync<OrgMemberNewOrUpdate>(L.S(S.OrgNewMember), new (){{"OrgId", OrgId}, {"Session", Session}});

    private async Task LoadData(LoadDataArgs arg)
    {
        _isLoading = true;
        try
        {
            var orderBy = OrgMemberOrderBy.Role;
            var asc = true;
            if (arg.Sorts.Count() == 1)
            {
                var sort = arg.Sorts.Single();
                orderBy = sort.Property switch
                {
                    nameof(OrgMember.Name) => OrgMemberOrderBy.Name,
                    nameof(OrgMember.Role) => OrgMemberOrderBy.Role,
                    _ => throw new InvalidDataException($"unknown sort property {sort.Property}")
                };
                asc = sort.SortOrder switch {
                    null => true,
                    SortOrder.Ascending => true,
                    SortOrder.Descending => false
                };
            }
            if (NameStartsWith.IsNullOrWhiteSpace())
            {
                NameStartsWith = null;
            }
            var res = await Api.OrgMember.Get(new(OrgId));
            Items = res;
        }
        finally
        {
            _isLoading = false;
        }
    }
    
    private async Task Update(OrgMember m)
        => await DialogService.OpenAsync<OrgMemberNewOrUpdate>(L.S(S.OrgUpdateMember), new (){{"OrgId", OrgId}, {"UpdateMember", m}, {"Session", Session}, {"OnInvited", OnInvited}, {"OnUpdated", OnUpdated}});

    private async Task OnInvited(OrgMember m)
    {
        Items = Items.Append(m).ToList();
        await _grid.Reload();
    }
    
    private async Task OnUpdated(OrgMember m)
    {
        var i = Items.FindIndex(x => x.Id == m.Id);
        Items[i] = m;
        await _grid.Reload();
    }
    
    public static List<RoleOpt> Roles(L l, UiCtx? ctx = null)
    {
        var res = new List<RoleOpt>() { new(OrgMemberRole.Owner, l), new(OrgMemberRole.Admin, l), new(OrgMemberRole.Member, l) };
        res.RemoveAll(x => x.Role < (ctx?.OrgMember?.Role ?? OrgMemberRole.Owner));
        return res;
    }

    public record RoleOpt
    {
        public OrgMemberRole? Role { get; init; }
        public string Display { get; init; }

        public RoleOpt(OrgMemberRole role, L l)
        {
            Role = role;
            Display = RoleString(role, l);
        }
    };

    public static string RoleString(OrgMemberRole r, L L)
        => r switch{
            OrgMemberRole.Owner => L.S(S.OrgMemberRoleOwner),
            OrgMemberRole.Admin => L.S(S.OrgMemberRoleAdmin),
            OrgMemberRole.Member => L.S(S.OrgMemberRoleMember),
            _ => throw new ArgumentOutOfRangeException()};

}