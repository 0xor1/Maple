@using Common.Shared
@using Common.Shared.Auth
@using Maple.Api.Org
@using Maple.Api.OrgMember
@using Maple.Client.Lib
@using IApi = Maple.Api.IApi
@using S = Maple.I18n.S

<div class="root col p-0h g-0h jc-s ai-s">
    <RadzenText class="m-t-0" TextStyle="TextStyle.H2">@L.S(S.OrgMembers)</RadzenText>
    @if (Ctx.HasOrgAdminPerm)
    {
        <RadzenButton class="m-b-1" ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" Text="@L.S(S.Invite)" Click="@GoToNew"/>
    }
    <RadzenDataGrid
        @ref="_grid"
        Count="Count"
        Data="Items"
        TItem="OrgMember"
        IsLoading="_isLoading"
        EmptyText="@L.S(S.OrgNoMembers)"
        FilterPopupRenderMode="PopupRenderMode.OnDemand" 
        FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
        AllowColumnPicking="true"
        AllowSorting="true" 
        AllowFiltering="true"
        LoadData="LoadData"
        KeyProperty="Id">
        <Columns>
            <RadzenDataGridColumn Sortable="true" Width="17em" TItem="OrgMember" Property="@nameof(OrgMember.Name)" Title="@L.S(S.Name)" FilterValue="@NameStartsWith">
                <Template Context="m">
                    <div class="flx child-no-shrink jc-s ai-c g-0h w-100p mw-100p p-rel">
                        <span class="shrink-1 ellip">@m.Name</span>
                        @if (Ctx.HasOrgAdminPerm && m.Role >= Ctx.SesOrgMember?.Role)
                        {
                            <div class="flx g-0q p-abs show-on-row-mouse-over" style="right: -1em;">
                                <RadzenButton @onclick:stopPropagation="true" Icon="edit" ButtonStyle="ButtonStyle.Info" Size="ButtonSize.ExtraSmall" Click="_ => Update(m)"/>
                            </div>
                        }
                    </div>
                </Template>
                <FilterTemplate>
                    <RadzenTextBox @bind-Value="@NameStartsWith" Style="width:100%"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="10em" Sortable="true" TItem="OrgMember" Property="@nameof(OrgMember.Role)" Title="@L.S(S.OrgMemberRole)" FilterValue="@Role">
                <Template Context="m">
                    @RoleString(m.Role, L)
                </Template>
                <FilterTemplate>
                    <RadzenDropDown Style="width: 100%" Name="Role" @bind-Value="@Role" TValue="OrgMemberRole?" ValueProperty="Role" TextProperty="Display" AllowClear="true" Data="Roles(L)"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Width="10em" Sortable="false" TItem="OrgMember" Property="@nameof(OrgMember.Country)" Title="@L.S(S.Country)" FilterValue="@Country">
                <Template Context="m">
                    @L.S(m.Country.Value)
                </Template>
                <FilterTemplate>
                    <RadzenDropDown Style="width: 100%" TValue="string" Data="@Countries" ValueProperty="Key" TextProperty="Value" Name="OwnerCountry" @bind-Value="@Country" AllowClear="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterOperator="StringFilterOperator.StartsWith" AllowFiltering="true"/>
                </FilterTemplate>
            </RadzenDataGridColumn>
            @foreach (var col in _skillCols)
            {
                <RadzenDataGridColumn Width="10em" Sortable="false" TItem="OrgMember" Property="@col.Name" Title="@col.Name" FilterValue="@col.Filter">
                    <Template Context="m">
                        @ExpLevelString(m.Data.SkillMatrix.Try(col.Name).Val, L)
                    </Template>
                    <FilterTemplate>
                        <RadzenDropDown Style="width: 100%" Name="@col.Name" @bind-Value="@col.Filter" TValue="ExpLevel?" ValueProperty="ExpLevel" TextProperty="Display" AllowClear="true" Data="ExpLevels(L)"/>
                    </FilterTemplate>
                </RadzenDataGridColumn>
            }
        </Columns>
    </RadzenDataGrid>
</div>

@inject L L;
@inject IApi Api;
@inject NavigationManager Nav;
@inject UiCtx Ctx;
@code{

    [CascadingParameter]
    public ISession Session { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public string OrgId { get; set; } = "";
    
    private List<KeyValuePair<string,string>> Countries => Util.Country.Enum.Select(c => new KeyValuePair<string,string>(c.Value, L.S(c.Value))).ToList();

    private bool? IsActive { get; set; } = true;
    private string? NameStartsWith { get; set; }
    private OrgMemberRole? Role { get; set; }
    private string? Country { get; set; }
    private int Count => Items.Count; 
    private List<OrgMember> Items { get; set; } = new ();
    private bool _isLoading = false;
    private RadzenDataGrid<OrgMember> _grid;
    private List<SkillCol> _skillCols;

    private class SkillCol
    {
        public string Name { get; set; }
        public ExpLevel? Filter  { get; set; }
    }

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        try
        {
            await LoadData(null);
            _skillCols = Ctx.Org.NotNull().Data.Skills.Select(x => new SkillCol() { Name = x}).ToList();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task GoToNew()
        => Nav.NavigateTo($"/org/{OrgId}/member_new");

    private async Task LoadData(LoadDataArgs? arg)
    {
        if (arg == null && Items.Any())
        {
            return;
        }
        _isLoading = true;
        try
        {
            var qry = Ctx.OrgMembers.AsEnumerable();
            var orderBy = OrgMemberOrderBy.Role;
            var asc = true;
            if (arg?.Sorts?.Count() == 1)
            {
                var sort = arg.Sorts.Single();
                orderBy = sort.Property switch
                {
                    nameof(OrgMember.Name) => OrgMemberOrderBy.Name,
                    nameof(OrgMember.Role) => OrgMemberOrderBy.Role,
                    _ => throw new InvalidDataException($"unknown sort property {sort.Property}")
                };
                asc = sort.SortOrder switch {
                    null => true,
                    SortOrder.Ascending => true,
                    SortOrder.Descending => false
                };
            }
            if (NameStartsWith.IsNullOrWhiteSpace())
            {
                NameStartsWith = null;
            }

            if (NameStartsWith != null)
            {
                qry = qry.Where(x => x.Name.StartsWith(NameStartsWith, StringComparison.InvariantCultureIgnoreCase));
            }

            if (Country != null)
            {
                qry = qry.Where(x => x.Country.Value == Country);
            }

            if (arg != null)
            {
                foreach (var f in arg.Filters.Empty().Where(x => x.FilterValue is ExpLevel))
                {
                    qry = qry.Where(x =>
                    {
                        var maybe = x.Data.SkillMatrix.Try(f.Property);
                        return maybe.Got && maybe.Val >= (f.FilterValue as ExpLevel?).NotNull();
                    });
                }
            }

            qry = (orderBy, asc) switch
            {
                (OrgMemberOrderBy.Name, true) => qry.OrderBy(x => x.Name.ToLower()),
                (OrgMemberOrderBy.Role, true) => qry.OrderBy(x => x.Role).ThenBy(x => x.Name.ToLower()),
                (OrgMemberOrderBy.Name, false) => qry.OrderByDescending(x => x.Name.ToLower()),
                (OrgMemberOrderBy.Role, false) => qry.OrderByDescending(x => x.Role).ThenBy(x => x.Name.ToLower())
            };

            Items = qry.ToList();
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task Update(OrgMember m)
        => Nav.NavigateTo($"/org/{OrgId}/member/{m.Id}/update");
            
    
    public static List<RoleOpt> Roles(L l, UiCtx? ctx = null)
    {
        var res = new List<RoleOpt>() { new(OrgMemberRole.Owner, l), new(OrgMemberRole.Admin, l), new(OrgMemberRole.Member, l) };
        res.RemoveAll(x => x.Role < (ctx?.OrgMember?.Role ?? OrgMemberRole.Owner));
        return res;
    }
    
    public static List<ExpLevelOpt> ExpLevels(L l, UiCtx? ctx = null)
    {
        var res = new List<ExpLevelOpt>() { new(ExpLevel.None, l), new(ExpLevel.Low, l), new(ExpLevel.Mid, l), new(ExpLevel.High, l), new(ExpLevel.Expert, l) };
        return res;
    }

    public record RoleOpt
    {
        public OrgMemberRole? Role { get; init; }
        public string Display { get; init; }

        public RoleOpt(OrgMemberRole role, L l)
        {
            Role = role;
            Display = RoleString(role, l);
        }
    };

    public record ExpLevelOpt
    {
        public ExpLevel? ExpLevel { get; init; }
        public string Display { get; init; }

        public ExpLevelOpt(ExpLevel? expLevel, L l)
        {
            ExpLevel = expLevel;
            Display = ExpLevelString(expLevel, l);
        }
    };

    public static string RoleString(OrgMemberRole r, L L)
        => r switch{
            OrgMemberRole.Owner => L.S(S.OrgMemberRoleOwner),
            OrgMemberRole.Admin => L.S(S.OrgMemberRoleAdmin),
            OrgMemberRole.Member => L.S(S.OrgMemberRoleMember),
            _ => throw new ArgumentOutOfRangeException()};

    public static string ExpLevelString(ExpLevel? l, L L)
        => l switch{
            null => L.S(S.NotSet),
            ExpLevel.None => L.S(S.ExpLevelNone),
            ExpLevel.Low => L.S(S.ExpLevelLow),
            ExpLevel.Mid => L.S(S.ExpLevelMid),
            ExpLevel.High => L.S(S.ExpLevelHigh),
            ExpLevel.Expert => L.S(S.ExpLevelExpert),
            _ => throw new ArgumentOutOfRangeException()};

}